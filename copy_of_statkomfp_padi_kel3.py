# -*- coding: utf-8 -*-
"""Copy of StatkomFP_padi_kel3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tj0BckVPag92FstF5105WamAeNxe5MTP

# Produktifitas Padi Naive Bayes

# Import Dataset

Disini kita import dataset terlebih dahulu dan membacanya dengan menggunakan library pandas
"""

import pandas as pd

# Membaca 2 dataset Training dan Testing (memasukkan 2 dataset)
datasetTrain = pd.read_csv('padi_produktifitas_training20 (1).csv', delimiter=';', encoding='utf-8')
datasetTest = pd.read_csv('padi_produktifitas_testing12 (1).csv', delimiter=';', encoding='utf-8')

datasetTrain.info()
datasetTrain.head()

datasetTest.info()
datasetTest.head()

"""# Cleaning Dataset

Delete kolom yg tidak di perlukan
"""

# Delete kolom no dan kabupaten/kota di kedua dataset
datasetTrain.drop(columns=['no', 'kabupaten/kota'], inplace=True)
datasetTest.drop(columns=['no', 'kabupaten/kota'], inplace=True)

"""Cleaning isi kolom Data Training"""

# Cleaning kolom yang bermasalah
def clean_columnTrain(column):
    if column.dtype == 'object':
        # Menghilangkan tanda titik, tanda koma, dan spasi
        column = column.str.replace('.', '', regex=False)
        column = column.str.replace(',', '.', regex=False)
        column = column.str.replace(' ', '', regex=False)
        # Mengonversi ke numerik, menangani kesalahan dengan mengatur ke NaN
        column = pd.to_numeric(column, errors='coerce')
    return column

# Penggunaan fungsi pada setiap kolom yang perlu dibersihkan
datasetTrain['luas_panen'] = clean_columnTrain(datasetTrain['luas_panen'])
datasetTrain['produksi_padi'] = clean_columnTrain(datasetTrain['produksi_padi'])
datasetTrain['hari_hujan'] = clean_columnTrain(datasetTrain['hari_hujan'])
datasetTrain['curah_hujan'] = clean_columnTrain(datasetTrain['curah_hujan'])
datasetTrain['luas_lahan'] = clean_columnTrain(datasetTrain['luas_lahan'])
datasetTrain['tenaga_kerja'] = clean_columnTrain(datasetTrain['tenaga_kerja'])
datasetTrain['jumlah_penduduk'] = clean_columnTrain(datasetTrain['jumlah_penduduk'])

"""Cek Data Training setelah di Cleaning

"""

print(datasetTrain.dtypes)
datasetTrain.head()

"""Cleaning isi kolom Data Testing"""

# Cleaning kolom yang bermasalah
def clean_columnTest(column):
    if column.dtype == 'object':
        # Menghilangkan tanda titik, tanda koma, dan spasi
        column = column.str.replace('.', '', regex=False)
        column = column.str.replace(',', '.', regex=False)
        column = column.str.replace(' ', '', regex=False)
        #Mengonversi ke numerik, menangani kesalahan dengan mengatur ke NaN
        column = pd.to_numeric(column, errors='coerce')
    return column

# Penggunaan fungsi pada setiap kolom yang perlu dibersihkan
datasetTest['luas_panen'] = clean_columnTest(datasetTest['luas_panen'])
datasetTest['produksi_padi'] = clean_columnTest(datasetTest['produksi_padi'])
datasetTest['hari_hujan'] = clean_columnTest(datasetTest['hari_hujan'])
datasetTest['curah_hujan'] = clean_columnTest(datasetTest['curah_hujan'])
datasetTest['luas_lahan'] = clean_columnTest(datasetTest['luas_lahan'])
datasetTest['tenaga_kerja'] = clean_columnTest(datasetTest['tenaga_kerja'])
datasetTest['jumlah_penduduk'] = clean_columnTest(datasetTest['jumlah_penduduk'])

"""Cek Data Testing setelah di Cleaning"""

print(datasetTest.dtypes)
datasetTest.head()

"""Mengklasifikasikan data numerik menjadi kelas tertentu."""

# 1. Klasifikasi 'luas_panen'
def klasifikasi_luas_panen(nilai):
    if nilai > 25180.91:
       return 'Besar'
    elif 12318.25 <= nilai <= 25180.91:
       return 'Sedang'
    else:
       return 'Kecil'

for nilai in ['luas_panen']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_luas_panen)
for nilai in ['luas_panen']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_luas_panen)


# 2. Klasifikasi 'produksi_padi'
def klasifikasi_produksi_padi(nilai):
    if nilai > 139929.40:
       return 'Banyak'
    elif 64838.4 <= nilai <= 139929.40:
       return 'Sedang'
    else:
       return 'Sedikit'

for nilai in ['produksi_padi']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_produksi_padi)
for nilai in ['produksi_padi']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_produksi_padi)


# 3. Klasifikasi 'hari_hujan'
def klasifikasi_hari_hujan(nilai):
    return 'Tinggi' if nilai >= 16.1 else 'Rendah'

for nilai in ['hari_hujan']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_hari_hujan)
for nilai in ['hari_hujan']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_hari_hujan)


# 4. Klasifikasi 'curah_hujan'
def klasifikasi_curah_hujan(nilai):
    return 'Tinggi' if nilai >= 246.8 else 'Rendah'

for nilai in ['curah_hujan']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_curah_hujan)
for nilai in ['curah_hujan']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_curah_hujan)

# 5. Klasifikasi 'luas_lahan'
def klasifikasi_luas_lahan(nilai):
    if nilai > 20745:
       return 'Luas'
    elif 10866 <= nilai < 20745:
       return 'Sedang'
    else:
       return 'Kecil'

for nilai in ['luas_lahan']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_luas_lahan)
for nilai in ['luas_lahan']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_luas_lahan)

# 6. Klasifikasi 'tenaga_kerja'
def klasifikasi_tenaga_kerja(nilai):
    if nilai > 131801:
       return 'Banyak'
    elif 78135 <= nilai <= 131801:
       return 'Sedang'
    else:
       return 'Sedikit'

for nilai in ['tenaga_kerja']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_tenaga_kerja)
for nilai in ['tenaga_kerja']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_tenaga_kerja)


# 7. Klasifikasi 'jumlah_penduduk'
def klasifikasi_jumlah_penduduk(nilai):
    if nilai > 463936:
       return 'Padat'
    else:
       return 'Tidak Padat'

for nilai in ['jumlah_penduduk']:
    datasetTrain[nilai] = datasetTrain[nilai].apply(klasifikasi_jumlah_penduduk)
for nilai in ['jumlah_penduduk']:
    datasetTest[nilai] = datasetTest[nilai].apply(klasifikasi_jumlah_penduduk)

datasetTrain.head()

datasetTest.head()

"""# Encode Data

Mengubah menjadi Bilangan Numerik
"""

# Luas Panen
def encode_luas(panen):
    if panen == 'Kecil':
        return 1
    elif panen == 'Sedang':
        return 2
    elif panen == 'Besar':
        return 3

for panen in ['luas_panen']:
        datasetTrain[panen] = datasetTrain[panen].apply(encode_luas)
for panen in ['luas_panen']:
        datasetTest[panen] = datasetTest[panen].apply(encode_luas)

# Produksi Padi
def encode_produksi(produksi):
    if produksi == 'Sedikit':
        return 1
    elif produksi == 'Sedang':
        return 2
    elif produksi == 'Banyak':
        return 3

for produksi in ['produksi_padi']:
        datasetTrain[produksi] = datasetTrain[produksi].apply(encode_produksi)
for produksi in ['produksi_padi']:
        datasetTest[produksi] = datasetTest[produksi].apply(encode_produksi)


# Hari Hujan
def encode_hari_hujan(hari_hujan):
    if hari_hujan == 'Rendah':
        return 1
    elif hari_hujan == 'Tinggi':
        return 2
for hari_hujan in ['hari_hujan']:
        datasetTrain[hari_hujan] = datasetTrain[hari_hujan].apply(encode_hari_hujan)
for hari_hujan in ['hari_hujan']:
        datasetTest[hari_hujan] = datasetTest[hari_hujan].apply(encode_hari_hujan)


# Curah Hujan
def encode_curah_hujan(curah_hujan):
    if curah_hujan == 'Rendah':
        return 1
    elif curah_hujan == 'Tinggi':
        return 2

for curah_hujan in ['curah_hujan']:
        datasetTrain[curah_hujan] = datasetTrain[curah_hujan].apply(encode_curah_hujan)
for curah_hujan in ['curah_hujan']:
        datasetTest[curah_hujan] = datasetTest[curah_hujan].apply(encode_curah_hujan)


# Luas Lahan
def encode_luas_lahan(lahan):
    if lahan == 'Kecil':
        return 1
    elif lahan == 'Sedang':
        return 2
    elif lahan == 'Luas':
        return 3

for lahan in ['luas_lahan']:
        datasetTrain[lahan] = datasetTrain[lahan].apply(encode_luas_lahan)
for lahan in ['luas_lahan']:
        datasetTest[lahan] = datasetTest[lahan].apply(encode_luas_lahan)


# Tenaga Kerja
def encode_tenaga_kerja(tenaga_kerja):
    if tenaga_kerja == 'Sedikit':
        return 1
    elif tenaga_kerja == 'Sedang':
        return 2
    elif tenaga_kerja == 'Banyak':
        return 3

for tenaga_kerja in ['tenaga_kerja']:
        datasetTrain[tenaga_kerja] = datasetTrain[tenaga_kerja].apply(encode_tenaga_kerja)
for tenaga_kerja in ['tenaga_kerja']:
        datasetTest[tenaga_kerja] = datasetTest[tenaga_kerja].apply(encode_tenaga_kerja)


# Jumlah Penduduk
def encode_jumlah_penduduk(penduduk):
    if penduduk == 'Tidak Padat':
        return 1
    elif penduduk == 'Padat':
        return 2

for penduduk in ['jumlah_penduduk']:
        datasetTrain[penduduk] = datasetTrain[penduduk].apply(encode_jumlah_penduduk)
for penduduk in ['jumlah_penduduk']:
        datasetTest[penduduk] = datasetTest[penduduk].apply(encode_jumlah_penduduk)


# Encode Label Produktivitas Padi
def encode_label(label):
    if label == 'Rendah':
        return 0
    elif label == 'Tinggi':
        return 1

for label in ['produktivitas_padi']:
    datasetTrain[label] = datasetTrain[label].apply(encode_label)
for label in ['produktivitas_padi']:
    datasetTest[label] = datasetTest[label].apply(encode_label)

datasetTrain.head()

datasetTest.head()

"""Cek apakah ada data kosong di Data Training"""

datasetTrain.isnull().sum()

"""# Perhitungan Naive Bayes

Menghitung Probabolitas Prior dan Probabilitas Likelihood
"""

# Menghitung Probabilitas Prior
prior = datasetTrain['produktivitas_padi'].value_counts(normalize=True)
print("Probabilitas Prior:")
print(prior)

# Menghitung Likelihood
print("\nProbabilitas Likelihood (P(fitur | Produktivitas Padi)):")
features = ['luas_panen', 'produksi_padi', 'hari_hujan', 'curah_hujan', 'luas_lahan', 'tenaga_kerja', 'jumlah_penduduk']

likelihoods = {}
for feature in features:
    likelihoods[feature] = {}
    for label in datasetTrain['produktivitas_padi'].unique():
        likelihood = datasetTrain[datasetTrain['produktivitas_padi'] == label][feature].value_counts(normalize=True)
        likelihoods[feature][label] = likelihood

        print(f"\nP(fitur = {feature} | Produktivitas Padi = {label}):")
        print(likelihood)

"""Membuat Prediksi Naive Bayes"""

# Fungsi Prediksi menggunakan Naive Bayes
def predict_naive_bayes(data_baru, prior, likelihoods, features):
    posteriors = {} # Dictionary untuk menyimpan probabilitas posterior untuk setiap kelas

    # Loop melalui setiap kelas (misalnya 0 dan 1)
    for label in prior.index:
        posterior = prior[label]  # Mulai dengan prior
        for feature in features:
            value = data_baru.get(feature, None)  # Ambil nilai fitur dari data_baru
            if value is not None and value in likelihoods[feature][label]:
                posterior *= likelihoods[feature][label][value]
            else:
                posterior *= 0.0001  # Handling nilai yang tidak muncul
        posteriors[label] = posterior
    return posteriors

# Prediksi untuk seluruh datasetTesting
prediksi_all = []
for i, row in datasetTest.iterrows():
    # Ambil data baris sebagai dictionary
    data_baru = row[features].to_dict()

    # Panggil fungsi prediksi untuk data_baru
    posteriors = predict_naive_bayes(data_baru, prior, likelihoods, features)

    # Ambil label dengan probabilitas tertinggi sebagai prediksi
    prediksi = max(posteriors, key=posteriors.get)

    # Simpan hasil prediksi
    prediksi_all.append(prediksi)

# Menambahkan hasil prediksi ke datasetTesting
datasetTest['Prediksi Produktivitas Padi'] = prediksi_all

# Menampilkan hasil prediksi
datasetTest.head(12)

# Confusion Matrix
def confusion_matrix(label_true, label_pred):
    """
        label_true: List atau array NumPy berisi label sebenarnya.
        label_pred: List atau array NumPy berisi label prediksi.

        TP (True Positive)
        TN (True Negative)
        FP (False Positive)
        FN (False Negative)
    """

    # Inisialisasi confusion matrix label produktivitas padi
    matrix = {
        'TP': 0,  # Tepat memprediksi “Tinggi” (produktivitas tinggi)
        'TN': 0,  # Tepat memprediksi “Rendah” (produktivitas rendah)
        'FP': 0,  # Salah memprediksi "Tinggi" padahal sebenarnya "Rendah".
        'FN': 0   # Salah memprediksi "Rendah" padahal sebenarnya "Tinggi".
    }

    # Iterasi melalui data
    for i in range(len(label_true)):
        if label_true[i] == 0 and label_pred[i] == 0:
            matrix['TN'] += 1
        elif label_true[i] == 0 and label_pred[i] == 1:
            matrix['FP'] += 1
        elif label_true[i] == 1 and label_pred[i] == 0:
            matrix['FN'] += 1
        elif label_true[i] == 1 and label_pred[i] == 1:
            matrix['TP'] += 1

    return matrix

# Menampilkan Confusion Matrix
matrix = confusion_matrix(datasetTest['produktivitas_padi'], datasetTest['Prediksi Produktivitas Padi'])
print(matrix)

# Menghitung Akurasi prediksi (Persentase)
def hitung_akurasi(datasetTest):
    # Bandingkan prediksi dengan label asli
    benar = sum(datasetTest['produktivitas_padi'] == datasetTest['Prediksi Produktivitas Padi'])
    salah = sum(datasetTest['produktivitas_padi'] != datasetTest['Prediksi Produktivitas Padi'])
    akurasi = benar / (benar + salah)
    return akurasi

# Hitung akurasi dalam bentuk persentase dan tampilkan
akurasi = hitung_akurasi(datasetTest) * 100
print(f"Akurasi model Naive Bayes: {akurasi:.2f}%")

"""# User Input"""

#import streamlit
import streamlit as st

# Fungsi untuk klasifikasi dan encoding (placeholder, sesuaikan dengan kebutuhan)
def klasifikasi_luas_panen(value): return "Kategori"
def klasifikasi_produksi_padi(value): return "Kategori"
def klasifikasi_hari_hujan(value): return "Kategori"
def klasifikasi_curah_hujan(value): return "Kategori"
def klasifikasi_luas_lahan(value): return "Kategori"
def klasifikasi_tenaga_kerja(value): return "Kategori"
def klasifikasi_jumlah_penduduk(value): return "Kategori"

def encode_luas(value): return 1
def encode_produksi(value): return 1
def encode_hari_hujan(value): return 1
def encode_curah_hujan(value): return 1
def encode_luas_lahan(value): return 1
def encode_tenaga_kerja(value): return 1
def encode_jumlah_penduduk(value): return 1

def predict_naive_bayes(user_input, prior, likelihoods, features):
    # Placeholder untuk fungsi prediksi
    return {"Rendah": 0.3, "Tinggi": 0.7}

# Streamlit Interface
st.title("Prediksi Produktivitas Padi")
st.write("Masukkan data untuk prediksi:")

# Input fitur untuk prediksi
luas_panen = st.number_input("Luas Panen (ha):", min_value=0.0, step=0.1)
produksi_padi = st.number_input("Produksi Padi (ton/ha):", min_value=0.0, step=0.1)
hari_hujan = st.number_input("Hari Hujan (hari):", min_value=0, step=1)
curah_hujan = st.number_input("Curah Hujan (mm):", min_value=0.0, step=0.1)
luas_lahan = st.number_input("Luas Lahan (ha):", min_value=0.0, step=0.1)
tenaga_kerja = st.number_input("Tenaga Kerja (orang):", min_value=0, step=1)
jumlah_penduduk = st.number_input("Jumlah Penduduk (orang):", min_value=0, step=1)

# Tombol untuk melakukan prediksi
if st.button("Prediksi"):
    user_input = {
        'luas_panen': luas_panen,
        'produksi_padi': produksi_padi,
        'hari_hujan': hari_hujan,
        'curah_hujan': curah_hujan,
        'luas_lahan': luas_lahan,
        'tenaga_kerja': tenaga_kerja,
        'jumlah_penduduk': jumlah_penduduk,
    }

    # Klasifikasi data input user
    user_input['luas_panen'] = klasifikasi_luas_panen(user_input['luas_panen'])
    user_input['produksi_padi'] = klasifikasi_produksi_padi(user_input['produksi_padi'])
    user_input['hari_hujan'] = klasifikasi_hari_hujan(user_input['hari_hujan'])
    user_input['curah_hujan'] = klasifikasi_curah_hujan(user_input['curah_hujan'])
    user_input['luas_lahan'] = klasifikasi_luas_lahan(user_input['luas_lahan'])
    user_input['tenaga_kerja'] = klasifikasi_tenaga_kerja(user_input['tenaga_kerja'])
    user_input['jumlah_penduduk'] = klasifikasi_jumlah_penduduk(user_input['jumlah_penduduk'])

    # Mengkode data input user
    user_input['luas_panen'] = encode_luas(user_input['luas_panen'])
    user_input['produksi_padi'] = encode_produksi(user_input['produksi_padi'])
    user_input['hari_hujan'] = encode_hari_hujan(user_input['hari_hujan'])
    user_input['curah_hujan'] = encode_curah_hujan(user_input['curah_hujan'])
    user_input['luas_lahan'] = encode_luas_lahan(user_input['luas_lahan'])
    user_input['tenaga_kerja'] = encode_tenaga_kerja(user_input['tenaga_kerja'])
    user_input['jumlah_penduduk'] = encode_jumlah_penduduk(user_input['jumlah_penduduk'])

    # Prediksi hasil Naive Bayes untuk data input user
    features = ['luas_panen', 'produksi_padi', 'hari_hujan', 'curah_hujan', 'luas_lahan', 'tenaga_kerja', 'jumlah_penduduk']
    prior = {}  # Placeholder untuk prior
    likelihoods = {}  # Placeholder untuk likelihoods
    posteriors = predict_naive_bayes(user_input, prior, likelihoods, features)
    prediksi = max(posteriors, key=posteriors.get)

    # Output hasil prediksi
    st.write("### Hasil Prediksi:")
    st.write(f"**Prediksi Produktivitas Padi:** {'Rendah' if prediksi == 'Rendah' else 'Tinggi'}")
